---
import { actions } from "astro:actions";
import { sentenceCase } from "text-case";

import type { GenericDataTable } from "~/crud/data-table";

type Props = GenericDataTable<"pegawai">; // TODO: do actual generic when astro component support them

const { base, name, getDetail, columns } = Astro.props;
const action = actions[name];
const dataList = await Astro.callAction(action.list.orThrow, undefined);
---

<div class="flex max-h-[80vh] flex-col">
  <div class="mb-4 flex gap-x-2 justify-self-start">
    <a href={`${base}/create`} class="btn btn-primary">
      Tambah {name}
    </a>
  </div>

  <div class="rounded-box flex-1 overflow-auto shadow-sm">
    <table id="data-table" class="table-sm table" data-base={base}>
      <thead>
        <tr class="bg-base-300 sticky top-0 z-10">
          <th class="sticky left-0 w-8 bg-inherit">No. </th>

          {
            Object.entries(columns).map(
              ([columnName, columnDef]) =>
                columnDef && (
                  <th>{(columnDef.header ?? sentenceCase)(columnName)}</th>
                )
            )
          }

          <th></th>
        </tr>
      </thead>

      <tbody>
        {
          dataList.map((data, idx) => (
            <tr
              data-id={data.id}
              data-detail={getDetail(data)}
              class="odd:bg-base-100 even:bg-base-200 hover:bg-base-300"
            >
              <th class="sticky left-0 bg-inherit">{idx + 1}</th>

              {Object.keys(columns).map((columnName) => {
                const columnDef = columns[columnName];
                if (!columnDef) return;

                const value = data[columnName];
                return (
                  <td>
                    <Fragment
                      set:html={
                        columnDef.format?.(value as never, data) ?? value
                      }
                    />
                  </td>
                );
              })}

              <td class="sticky right-0 bg-inherit max-lg:static">
                <div class="flex gap-x-2">
                  <button class="btn btn-xs btn-warning edit-button">
                    Edit
                  </button>
                  <button class="btn btn-xs btn-error delete-button">
                    Hapus
                  </button>
                </div>
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>
</div>

<dialog id="delete-modal" class="modal max-sm:modal-bottom">
  <div class="modal-box">
    <h3 class="text-lg font-bold">Hapus {name} ini?</h3>
    <p class="py-4"></p>
    <div class="modal-action">
      <form method="dialog">
        <button class="btn btn-outline"> Batal </button>
      </form>

      <form action={action.delete} method="post">
        <input type="hidden" name="id" />
        <button class="btn btn-error">Hapus</button>
      </form>
    </div>
  </div>

  <form method="dialog" class="modal-backdrop">
    <button> close </button>
  </form>
</dialog>

<script>
  import { navigate } from "astro:transitions/client";

  const initializeActionHandler = () => {
    const tableElement = document.getElementById("data-table");
    if (!(tableElement instanceof HTMLTableElement)) return;

    const { base } = tableElement.dataset;
    if (!base) throw new Error("Table data-base attribute is not defined");

    tableElement.addEventListener("click", ({ target }) => {
      if (!(target instanceof HTMLButtonElement)) return;

      const getRowData = () => {
        const rowElement = target.closest("tr");
        if (!rowElement) throw new Error("Unable to find row element");

        const { id: rowId, detail: rowDetail } = rowElement.dataset;
        if (!rowId || !rowDetail)
          throw new Error("Row element doesn't have data-* attribute");

        return [rowId, rowDetail] as const;
      };

      if (target.matches(".edit-button")) {
        const [rowId] = getRowData();
        navigate(`${base}/edit/${rowId}`);
      } else if (target.matches(".delete-button")) {
        const [rowId, rowDetail] = getRowData();

        const dialog = document.getElementById("delete-modal");
        if (!(dialog instanceof HTMLDialogElement))
          throw new Error("Unable to find confirmation dialog element");

        dialog.querySelector("p")!.innerText = rowDetail;
        dialog.querySelector("input")!.value = rowId;
        dialog.showModal();
      }
    });
  };

  document.addEventListener("astro:after-swap", initializeActionHandler);
  initializeActionHandler();
</script>
